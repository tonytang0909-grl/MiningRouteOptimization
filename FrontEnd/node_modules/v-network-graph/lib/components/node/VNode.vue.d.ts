import { ShapeStyle, NodeLabelStyle, OppositeNode } from '../..';
import { DefineComponent, PropType, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
import { Position } from '../../common/types';
declare const _default: __VLS_WithTemplateSlots<DefineComponent<{
    id: {
        type: PropType<string>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        default: undefined;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
            oppositeNodeIds: Record<string, string>;
            oppositeNodes: Record<string, OppositeNode>;
        }>;
        required: true;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    id: {
        type: PropType<string>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        default: undefined;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
            oppositeNodeIds: Record<string, string>;
            oppositeNodes: Record<string, OppositeNode>;
        }>;
        required: true;
    };
}>>, {
    pos: Position;
}>, {
    "override-node"?(_: {
        nodeId: string;
        scale: number;
        config: ShapeStyle;
        class: {
            draggable: boolean;
            selectable: number | boolean;
        };
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
