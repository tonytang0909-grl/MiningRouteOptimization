import { BoxSelectionOption } from '../composables/mouse/boxSelection';
import { Configs, StrokeStyle, EdgeLabelStyle, ShapeStyle, NodeLabelStyle } from '../common/configs';
import { RecursivePartial } from '../common/common';
import { DefineComponent, PropType, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
import { Node, Edge, Path, EdgePosition, EdgeLabelArea, EventHandlers, Nodes, Edges, InputPaths, Layouts } from '../common/types';
import { Layers, Point, Sizes } from '../common/types';
import { Box } from '../modules/svg-pan-zoom-ex';
import { ExportOptions } from '../utils/svg';
/**
 * Zoom in
 */
declare function zoomIn(): void;
/**
 * Zoom out
 */
declare function zoomOut(): void;
/**
 * Pan to a rendered position
 * @return {Point} point to pan
 */
declare function panTo(point: Point): void;
/**
 * Relatively pan the graph by a specified rendered position vector
 * @return {Point} relative point to pan
 */
declare function panBy(point: Point): void;
/**
 * Get pan vector
 * @return {Point} pan vector
 */
declare function getPan(): Point;
/**
 * Get all calculate svg dimensions
 */
declare function getSizes(): Sizes;
/**
 * Translate from DOM to SVG coordinates
 * @return {Point} coordinates in the SVG
 */
declare function translateFromDomToSvgCoordinates(coordinates: Point): Point;
/**
 * Translate from SVG to DOM coordinates
 * @return {Point} coordinates in the DOM
 */
declare function translateFromSvgToDomCoordinates(coordinates: Point): Point;
/**
 * Get graph as SVG text.
 * @return {string} SVG text
 * @deprecated
 */
declare function getAsSvg(): string;
/**
 * Export graph as SVG text.
 * @return {string} SVG text
 */
declare function exportAsSvgText(options?: Partial<ExportOptions>): Promise<string>;
/**
 * Export graph as SVG element.
 * @return {SVGElement} SVG element
 */
declare function exportAsSvgElement(options?: Partial<ExportOptions>): Promise<SVGElement>;
declare const _default: __VLS_WithTemplateSlots<DefineComponent<{
    edges: {
        type: PropType<Edges>;
        default: () => {};
    };
    nodes: {
        type: PropType<Nodes>;
        default: () => {};
    };
    paths: {
        type: PropType<InputPaths>;
        default: () => {};
    };
    configs: {
        type: PropType<RecursivePartial<Configs<Node, Edge, Path>>>;
        default: () => {};
    };
    layouts: {
        type: PropType<RecursivePartial<Layouts>>;
        default: () => {};
    };
    zoomLevel: {
        type: PropType<number>;
        default: number;
    };
    selectedNodes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    eventHandlers: {
        type: PropType<EventHandlers>;
        default: () => {};
    };
    selectedEdges: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedPaths: {
        type: PropType<string[]>;
        default: () => never[];
    };
    layers: {
        type: PropType<Layers>;
        default: () => {};
    };
}, {
    fitToContents: () => Promise<void>;
    panToCenter: () => Promise<void>;
    getViewBox: () => Box;
    setViewBox: (box: Box) => void | undefined;
    transitionWhile: (func: () => void | Promise<void>, duration?: number, timingFunction?: string) => void;
    startBoxSelection: (options?: Partial<BoxSelectionOption> | undefined) => void;
    stopBoxSelection: () => void;
    zoomIn: typeof zoomIn;
    zoomOut: typeof zoomOut;
    panTo: typeof panTo;
    panBy: typeof panBy;
    getPan: typeof getPan;
    getSizes: typeof getSizes;
    translateFromDomToSvgCoordinates: typeof translateFromDomToSvgCoordinates;
    translateFromSvgToDomCoordinates: typeof translateFromSvgToDomCoordinates;
    getAsSvg: typeof getAsSvg;
    exportAsSvgText: typeof exportAsSvgText;
    exportAsSvgElement: typeof exportAsSvgElement;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "update:zoomLevel": (v: number) => void;
    "update:selectedNodes": (v: string[]) => void;
    "update:selectedEdges": (v: string[]) => void;
    "update:selectedPaths": (v: string[]) => void;
    "update:layouts": (v: Layouts) => void;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    edges: {
        type: PropType<Edges>;
        default: () => {};
    };
    nodes: {
        type: PropType<Nodes>;
        default: () => {};
    };
    paths: {
        type: PropType<InputPaths>;
        default: () => {};
    };
    configs: {
        type: PropType<RecursivePartial<Configs<Node, Edge, Path>>>;
        default: () => {};
    };
    layouts: {
        type: PropType<RecursivePartial<Layouts>>;
        default: () => {};
    };
    zoomLevel: {
        type: PropType<number>;
        default: number;
    };
    selectedNodes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    eventHandlers: {
        type: PropType<EventHandlers>;
        default: () => {};
    };
    selectedEdges: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedPaths: {
        type: PropType<string[]>;
        default: () => never[];
    };
    layers: {
        type: PropType<Layers>;
        default: () => {};
    };
}>> & {
    "onUpdate:zoomLevel"?: ((v: number) => any) | undefined;
    "onUpdate:selectedNodes"?: ((v: string[]) => any) | undefined;
    "onUpdate:selectedEdges"?: ((v: string[]) => any) | undefined;
    "onUpdate:selectedPaths"?: ((v: string[]) => any) | undefined;
    "onUpdate:layouts"?: ((v: Layouts) => any) | undefined;
}, {
    edges: Edges;
    nodes: Nodes;
    paths: InputPaths;
    configs: RecursivePartial<Configs<Node, Edge, Path>>;
    layouts: RecursivePartial<Layouts>;
    zoomLevel: number;
    selectedNodes: string[];
    eventHandlers: EventHandlers;
    selectedEdges: string[];
    selectedPaths: string[];
    layers: Layers;
}>, Partial<Record<string, (_: {
    key: string;
    scale: number;
}) => any>> & Partial<Record<string, (_: {
    scale: number;
}) => any>> & Partial<Record<string, (_: {
    scale: number;
}) => any>> & Partial<Record<string, (_: {
    scale: number;
}) => any>> & Partial<Record<string, (_: {
    scale: number;
}) => any>> & {
    "edge-overlay"?(_: {
        edgeId: string | undefined;
        edge: Edge | undefined;
        edges: {
            [x: string]: Edge | undefined;
        };
        isSummarized: false;
        stroke: StrokeStyle;
        position: EdgePosition;
        center: Point;
        hovered: boolean;
        selected: boolean;
        scale: number;
        length: number;
        pointAtLength: (distance: number) => Point;
    }): any;
    "edge-label"?(_: {
        edgeId: string;
        edge: Edge;
        config: EdgeLabelStyle;
        area: EdgeLabelArea;
        hovered: boolean;
        selected: boolean;
        scale: number;
    }): any;
    "edges-label"?(_: {
        edges: Edges;
        config: EdgeLabelStyle;
        area: EdgeLabelArea;
        hovered: boolean;
        selected: boolean;
        scale: number;
    }): any;
    "override-node"?(_: {
        nodeId: string;
        scale: number;
        config: ShapeStyle;
        class: {
            draggable: boolean;
            selectable: number | boolean;
        };
    }): any;
    "override-node-label"?(_: {
        nodeId: string;
        scale: number;
        text: string;
        x: number;
        y: number;
        config: NodeLabelStyle;
        shape: ShapeStyle;
        textAnchor: string;
        dominantBaseline: string;
        class: {
            draggable: boolean;
            selectable: number | boolean;
        };
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
