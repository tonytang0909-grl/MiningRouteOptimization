import { Point2D } from '../../modules/vector2d/core';
import { EdgeLabelStyle, Vector2D, StrokeStyle } from '../..';
import { Line } from '../../models/edge';
import { DefineComponent, PropType, WatchStopHandle, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
import { EdgeLabelArea, Edges } from '../../common/types';
declare const _default: __VLS_WithTemplateSlots<DefineComponent<{
    edges: {
        type: PropType<Edges>;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            line: Line;
            label: EdgeLabelStyle;
            selectable: number | boolean;
            selected: boolean;
            hovered: boolean;
            origin: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            labelPosition: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            position: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            curve?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                theta: number;
                circle: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    radius: number;
                };
                control: {
                    x: number;
                    y: number;
                }[];
            } | undefined;
            loop?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                radius: [number, number];
                isLargeArc: boolean;
                isClockwise: boolean;
            } | undefined;
            sourceMarkerId?: string | undefined;
            targetMarkerId?: string | undefined;
            zIndex: number;
            stopWatchHandle: WatchStopHandle;
        }>;
        required: true;
    };
    summarizeState: {
        type: PropType<{
            stroke: StrokeStyle;
        }>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    edges: {
        type: PropType<Edges>;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            line: Line;
            label: EdgeLabelStyle;
            selectable: number | boolean;
            selected: boolean;
            hovered: boolean;
            origin: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            labelPosition: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            position: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            curve?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                theta: number;
                circle: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    radius: number;
                };
                control: {
                    x: number;
                    y: number;
                }[];
            } | undefined;
            loop?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                radius: [number, number];
                isLargeArc: boolean;
                isClockwise: boolean;
            } | undefined;
            sourceMarkerId?: string | undefined;
            targetMarkerId?: string | undefined;
            zIndex: number;
            stopWatchHandle: WatchStopHandle;
        }>;
        required: true;
    };
    summarizeState: {
        type: PropType<{
            stroke: StrokeStyle;
        }>;
    };
}>>, {}>, {
    default?(_: {
        edges: Edges;
        config: EdgeLabelStyle;
        area: EdgeLabelArea;
        hovered: boolean;
        selected: boolean;
        scale: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
