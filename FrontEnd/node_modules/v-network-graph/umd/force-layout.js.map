{"version":3,"file":"force-layout.js","sources":["../src/layouts/force.ts","../src/force-layout.umd.ts"],"sourcesContent":["import { Ref, toRef, watch } from \"vue\"\nimport * as d3 from \"d3-force\"\nimport { Edges, NodePositions, Nodes } from \"@/common/types\"\nimport { OnClickHandler, OnDragHandler } from \"@/common/types\"\nimport { LayoutActivateParameters, LayoutHandler } from \"./handler\"\n\nexport interface ForceNodeDatum extends d3.SimulationNodeDatum {\n  id: string\n}\n\nexport interface ForceEdgeDatum {\n  source: string\n  target: string\n}\n\ntype d3Type = typeof d3\n\ntype CreateSimulationFunction = (\n  d3: d3Type,\n  nodes: ForceNodeDatum[],\n  edges: ForceEdgeDatum[]\n) => d3.Simulation<ForceNodeDatum, ForceEdgeDatum>\n\nexport type ForceLayoutParameters = {\n  positionFixedByDrag?: boolean\n  positionFixedByClickWithAltKey?: boolean\n  noAutoRestartSimulation?: boolean\n  createSimulation?: CreateSimulationFunction\n}\n\nexport class ForceLayout implements LayoutHandler {\n  private onDeactivate?: () => void\n  private onTick?: () => void\n\n  constructor(private options: ForceLayoutParameters = {}) {}\n\n  activate(parameters: LayoutActivateParameters): void {\n    const { nodePositions, nodes, edges, emitter } = parameters\n    let { nodeLayouts, nodeLayoutMap } = this.buildNodeLayouts(nodes.value, nodePositions)\n\n    const simulation = this.createSimulation(\n      nodeLayouts,\n      this.forceLayoutEdges(edges.value, nodes.value)\n    )\n\n    this.onTick = () => {\n      for (const node of nodeLayouts) {\n        const layout = nodePositions.value?.[node.id]\n        if (layout) {\n          const x = node.x ?? 0\n          const y = node.y ?? 0\n          if (layout.x !== x || layout.y !== x) {\n            Object.assign(layout, { x, y })\n          }\n        } else {\n          nodePositions.value[node.id] = {\n            x: node.x ?? 0,\n            y: node.y ?? 0,\n          }\n        }\n      }\n    }\n    simulation.on(\"tick\", this.onTick)\n\n    // for ticked manually\n    this.onTick()\n\n    const restartSimulation = () => {\n      if (!this.options.noAutoRestartSimulation) {\n        simulation.alpha(0.1).restart()\n      }\n    }\n\n    const onDrag: OnDragHandler = positions => {\n      if (this.options.noAutoRestartSimulation) {\n        for (const [id, pos] of Object.entries(positions)) {\n          const nodePos = nodePositions.value?.[id]\n          nodePos.x = pos.x\n          nodePos.y = pos.y\n        }\n      } else {\n        for (const [id, pos] of Object.entries(positions)) {\n          const nodePos = nodeLayoutMap[id]\n          nodePos.fx = pos.x\n          nodePos.fy = pos.y\n        }\n        restartSimulation()\n      }\n    }\n\n    const onDragEnd: OnDragHandler = positions => {\n      for (const [id, pos] of Object.entries(positions)) {\n        const layout = this.getNodeLayout(nodePositions, id)\n        const nodePos: d3.SimulationNodeDatum = nodeLayoutMap?.[id] ?? { x: 0, y: 0 }\n        if (layout.value.fixed || this.options.positionFixedByDrag) {\n          nodePos.fx = pos.x\n          nodePos.fy = pos.y\n          layout.value.fixed = true\n        } else {\n          nodePos.x = pos.x\n          nodePos.y = pos.y\n          delete nodePos.fx\n          delete nodePos.fy\n        }\n      }\n      restartSimulation()\n    }\n\n    const onClick: OnClickHandler = ({ node, event }) => {\n      if (this.options.positionFixedByClickWithAltKey && event.altKey) {\n        const layout = this.getNodeLayout(nodePositions, node)\n        let nodePos: ForceNodeDatum | undefined = nodeLayoutMap?.[node]\n        if (!nodePos) {\n          nodePos = { id: node, x: 0, y: 0 }\n          nodeLayoutMap[node] = nodePos\n        }\n\n        if (layout.value.fixed) {\n          // unfix\n          delete layout.value.fixed\n          nodePos.x = nodePos.fx || nodePos.x\n          nodePos.y = nodePos.fy || nodePos.y\n          delete nodePos.fx\n          delete nodePos.fy\n        } else {\n          // fix\n          layout.value.fixed = true\n          nodePos.fx = nodePos.x\n          nodePos.fy = nodePos.y\n        }\n        restartSimulation()\n      }\n    }\n\n    const stopNetworkWatch = watch(\n      () => [\n        Object.keys(nodes.value),\n        Object.keys(nodePositions.value),\n        // Watch only for changes in links, not all properties of the edge objects.\n        Object.values(edges.value).map(e => `${e.source}=${e.target}`),\n      ],\n      () => {\n        ;({ nodeLayouts, nodeLayoutMap } = this.buildNodeLayouts(nodes.value, nodePositions))\n        simulation.nodes(nodeLayouts)\n        const forceEdges = simulation.force<d3.ForceLink<ForceNodeDatum, ForceEdgeDatum>>(\"edge\")\n        if (forceEdges) {\n          forceEdges.links(this.forceLayoutEdges(edges.value, nodes.value))\n        }\n        restartSimulation()\n      }\n    )\n\n    emitter.on(\"node:dragstart\", onDrag)\n    emitter.on(\"node:pointermove\", onDrag)\n    emitter.on(\"node:dragend\", onDragEnd)\n    emitter.on(\"node:click\", onClick)\n\n    this.onDeactivate = () => {\n      simulation.stop()\n      stopNetworkWatch()\n      emitter.off(\"node:dragstart\", onDrag)\n      emitter.off(\"node:pointermove\", onDrag)\n      emitter.off(\"node:dragend\", onDragEnd)\n      emitter.off(\"node:click\", onClick)\n    }\n  }\n\n  deactivate(): void {\n    if (this.onDeactivate) {\n      this.onDeactivate()\n    }\n    this.onTick = undefined\n  }\n\n  ticked(): void {\n    this.onTick?.()\n  }\n\n  private createSimulation(\n    nodes: ForceNodeDatum[],\n    edges: ForceEdgeDatum[]\n  ): d3.Simulation<ForceNodeDatum, ForceEdgeDatum> {\n    if (this.options.createSimulation) {\n      return this.options.createSimulation(d3, nodes, edges)\n    } else {\n      const forceLink = d3.forceLink<ForceNodeDatum, ForceEdgeDatum>(edges).id(d => d.id)\n      return d3\n        .forceSimulation(nodes)\n        .force(\"edge\", forceLink.distance(100))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"collide\", d3.forceCollide(50).strength(0.2))\n        .force(\"center\", d3.forceCenter().strength(0.05))\n        .alphaMin(0.001)\n    }\n  }\n\n  private buildNodeLayouts(nodes: Readonly<Nodes>, nodePositions: Ref<NodePositions>) {\n    const newNodes = Object.keys(nodes).filter(n => !(n in nodePositions.value))\n    const nodeLayouts = this.forceNodeLayouts(nodePositions.value, newNodes)\n    const nodeLayoutMap = Object.fromEntries(nodeLayouts.map(n => [n.id, n]))\n    return { nodeLayouts, nodeLayoutMap }\n  }\n\n  private forceNodeLayouts(layouts: NodePositions, newNodes: string[]): ForceNodeDatum[] {\n    const data: ForceNodeDatum[] = Object.entries(layouts).map(([id, v]) => {\n      return v.fixed ? { id, ...v, fx: v.x, fy: v.y } : { id, ...v }\n    })\n    newNodes.map(id => ({ id })).forEach(n => data.push(n))\n    return data\n  }\n\n  private forceLayoutEdges(edges: Edges, nodes: Nodes): ForceEdgeDatum[] {\n    // d3-force replaces the source/target in the edge with NodeDatum\n    // objects, so build own link objects.\n    return Object.values(edges)\n      .filter(edge => edge.source in nodes && edge.target in nodes)\n      .map(v => ({\n        source: v.source,\n        target: v.target,\n      }))\n  }\n\n  private getNodeLayout(nodePositions: Ref<NodePositions>, node: string) {\n    const layout = toRef(nodePositions.value, node)\n    if (!layout.value) {\n      layout.value = { x: 0, y: 0 }\n    }\n    return layout\n  }\n}\n","import { ForceLayout } from \"./layouts/force\"\n\nif ((globalThis as any)[\"VNetworkGraph\"]) {\n  Object.assign((globalThis as any)[\"VNetworkGraph\"], {\n    ForceLayout,\n  })\n}\n\nexport default {\n  ForceLayout,\n}\n"],"names":["ForceLayout","options","parameters","nodePositions","nodes","edges","emitter","nodeLayouts","nodeLayoutMap","simulation","node","layout","_a","x","_b","y","_c","_d","_e","restartSimulation","onDrag","positions","id","pos","nodePos","onDragEnd","onClick","event","stopNetworkWatch","watch","e","forceEdges","d3","forceLink","d","newNodes","n","layouts","data","v","__spreadProps","__spreadValues","edge","toRef","forceLayout_umd"],"mappings":"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"}