{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      transformedEdges: {},\n      nodes: {}\n    };\n  },\n  methods: {\n    // Mapping function,\n\n    async fetchNodes() {\n      try {\n        const response = await axios.get('/node');\n        // Transform the fetched data\n        this.nodes = response.data;\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    },\n    async fetchEdges() {\n      try {\n        const response = await axios.get('/edges');\n        // Transform the fetched data\n\n        this.transformedEdges = response.data.map(key => {\n          return {\n            source: key.src,\n            target: key.dest\n          };\n        });\n        console.log(this.transformedEdges);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchNodes();\n    this.fetchEdges();\n  }\n};","map":{"version":3,"names":["axios","data","transformedEdges","nodes","methods","fetchNodes","response","get","error","console","fetchEdges","map","key","source","src","target","dest","log","mounted"],"sources":["/Users/zhuang/Desktop/SEP_Project/set_path/src/components/Visualization.vue"],"sourcesContent":["<template>\n    <div>\n      <!-- Use the transformed data with v-network-graph component -->\n      <v-network-graph :nodes=\"nodes\" :edges=\"transformedEdges\" />\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        transformedEdges: {},\n        nodes: {}\n      };\n    },\n    methods: {\n      // Mapping function,\n  \n      async fetchNodes() {\n        try {\n          const response = await axios.get('/node');\n          // Transform the fetched data\n          this.nodes = response.data;\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      },\n      async fetchEdges() {\n        try {\n          const response = await axios.get('/edges');\n          // Transform the fetched data\n         \n            this.transformedEdges = response.data.map(key => {\n            return {\n                source: key.src,\n                target: key.dest\n            };\n            });\n          console.log(this.transformedEdges);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      }\n    },\n    mounted() {\n      this.fetchNodes();\n      this.fetchEdges();\n    }\n  };\n  </script>\n  "],"mappings":"AAQE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,CAAC,CAAC;MACpBC,KAAK,EAAE,CAAC;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;;IAEA,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,OAAO,CAAC;QACzC;QACA,IAAI,CAACJ,KAAI,GAAIG,QAAQ,CAACL,IAAI;MAC5B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMJ,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,QAAQ,CAAC;QAC1C;;QAEE,IAAI,CAACL,gBAAe,GAAII,QAAQ,CAACL,IAAI,CAACU,GAAG,CAACC,GAAE,IAAK;UACjD,OAAO;YACHC,MAAM,EAAED,GAAG,CAACE,GAAG;YACfC,MAAM,EAAEH,GAAG,CAACI;UAChB,CAAC;QACD,CAAC,CAAC;QACJP,OAAO,CAACQ,GAAG,CAAC,IAAI,CAACf,gBAAgB,CAAC;MACpC,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR,IAAI,CAACb,UAAU,CAAC,CAAC;IACjB,IAAI,CAACK,UAAU,CAAC,CAAC;EACnB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}